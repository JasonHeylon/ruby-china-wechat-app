<style lang="scss">
  .topic-detail {
    .topic-head {
      background-color: #fafafa;
      padding: 10rpx 20rpx;
      margin-bottom: 30rpx;
    }
    .topic-title  {
      position: relative;
      font-weight: bold;
      display: flex;
      text { width: 100%; }
      image {
        width: 80rpx;
        height: 80rpx;
        border-radius: 50%;
        background-color:#ddd;
      }
    }
    .topic-desc {
      color: #777;
      font-size: .6rem;
    }
    .topic-body {
      padding: 20rpx;
    }
    .topic-stat {
      font-size: .8rem;
      background-color:#fafafa;
      color:#666;
      padding:20rpx;

      border: 1px solid #eee;
      border-left: 0;
      border-right: 0;
    }
  }
</style>

<template>
  <view class="topic-detail">
    <view class="topic-head">
      <view class="topic-title">
        <text>{{ topic.title }}</text>
        <image mode="aspectFill" src="{{topic.user.avatar_url}}"></image>
      </view>
      <view class="topic-desc">
        {{ topic.user.name ? topic.user.name : topic.user.login }}
        - 发布于 {{ createdDate }} - {{ topic.hits }} 次阅读
      </view>
    </view>

    <view class="topic-body">
      <markdown-viewer content="{{topic.body}}" wx:if="{{topic.body}}"></markdown-viewer>
    </view>

    <view class="topic-stat">
      共收到{{topic.replies_count}} 个回复， {{ topic.likes_count }} 个赞
    </view>

    <reply-list :topicId.sync="topicId">
    </reply-list>

  </view>
</template>

<script>
import wepy from 'wepy'
import api from '../utilities/api'
import ReplyList from '../components/replyList'
import moment from 'moment'

export default class Topic extends wepy.page {
  config = {
    navigationBarTitleText: 'Ruby China',
    enablePullDownRefresh: true,
    usingComponents: {
      'markdown-viewer': '../components/markdownViewer/markdownViewer'
    }
  }

  data = {
    topicId: null,
    topic: {},
    parsedBody: {}
  }

  components = {
    'reply-list': ReplyList
  }

  computed = {
    createdDate () {
      return moment(this.topic.created_at).format('Y-M-D H:m')
    }
  }

  methods = {
  }

  onLoad (option) {
    this.topicId = option.id
    this.fetchData()
  }
  onReachBottom () {
    this.$broadcast('fetchMoreReplies')
  }

  onPullDownRefresh () {
    this.fetchData()
    this.$broadcast('refreshReplies')
  }

  fetchData () {
    api.queryTopicDetail(this.topicId).then((data) => {
      this.topic = data.topic
      this.$apply()
    })
  }
}
</script>
